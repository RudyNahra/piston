#!/usr/bin/env bash

if [ -e "correct_output.txt" ]; then
    # Run checker
    ./checker/checker input.txt correct_output.txt output.txt
else
    # Check if grader_config.json exists
    if [ ! -f "graders/grader_config.json" ]; then
        echo "Error: graders/grader_config.json not found" >&2
        echo "Current directory contents:" >&2
        find . -type f -o -type d | sed -e 's/[^-][^\/]*\//  |/g' -e 's/|\([^ ]\)/|-\1/' >&2
        exit 1
    fi
    
    # Read task type from grader_config.json using grep and sed
    TASK_TYPE=$(grep -o '"task_type":[^,}]*' graders/grader_config.json | sed 's/"task_type":\s*"\([^"]*\)"/\1/')
    case "$TASK_TYPE" in
        "Batch")
            ./"${@%.*}" < input.txt
            ;;
            
        "Communication")
            # Create a PID file to track our child processes
            PID_FILE=$(mktemp)
            
            # Define cleanup function for Communication tasks
            cleanup() {
                # Clean up FIFO directories if they exist
                if [ -n "${FIFO_DIRS[*]}" ]; then
                    for dir in "${FIFO_DIRS[@]}"; do
                        [ -d "$dir" ] && rm -rf "$dir"
                    done
                fi
                
                # Kill only our child processes using the PID file
                if [ -f "$PID_FILE" ]; then
                    while read -r pid; do
                        if kill -0 "$pid" 2>/dev/null; then
                            kill "$pid" 2>/dev/null || kill -9 "$pid" 2>/dev/null || true
                        fi
                    done < "$PID_FILE"
                    rm -f "$PID_FILE"
                fi
            }
            trap cleanup EXIT INT TERM
            
            # Read num_processes using grep and sed
            NUM_PROCESSES=$(grep -o '"task_type_parameters_Communication_num_processes":[^,}]*' graders/grader_config.json | sed 's/.*:\s*\([0-9]*\)/\1/')
            
            # Read user_io parameter from grader_config.json, default to "std_io" if not found
            USER_IO=$(grep -o '"task_type_parameters_Communication_user_io":[^,}]*' graders/grader_config.json | sed 's/.*:\s*"\([^"]*\)"/\1/')
            if [ -z "$USER_IO" ]; then
                USER_IO="std_io"
            fi
            
            # Create temporary directories for FIFOs
            FIFO_DIRS=()
            for i in $(seq 0 $((NUM_PROCESSES-1))); do
                FIFO_DIRS[$i]=$(mktemp -d)
                
                # Create FIFOs for this process
                mkfifo "${FIFO_DIRS[$i]}/u${i}_to_m"
                mkfifo "${FIFO_DIRS[$i]}/m_to_u${i}"
                chmod 755 "${FIFO_DIRS[$i]}"
                chmod 666 "${FIFO_DIRS[$i]}/u${i}_to_m" "${FIFO_DIRS[$i]}/m_to_u${i}"
            done

            # Start manager in background with all FIFOs as arguments
            MANAGER_ARGS=""
            for i in $(seq 0 $((NUM_PROCESSES-1))); do
                MANAGER_ARGS="$MANAGER_ARGS ${FIFO_DIRS[$i]}/u${i}_to_m ${FIFO_DIRS[$i]}/m_to_u${i}"
            done
            # we don't actually want the user code to have access to the input file
            { cat input.txt; rm input.txt; } | ./graders/manager $MANAGER_ARGS &
            echo $! >> "$PID_FILE"  # Record manager PID
            
            # Start all user processes
            for i in $(seq 0 $((NUM_PROCESSES-1))); do
                if [ "$USER_IO" = "fifo_io" ]; then
                    # Pass FIFOs as arguments
                    ARGS="${FIFO_DIRS[$i]}/m_to_u${i} ${FIFO_DIRS[$i]}/u${i}_to_m"
                    if [ "$NUM_PROCESSES" -ne 1 ]; then
                        ARGS="$ARGS $i"
                    fi
                    ./"${@%.*}" $ARGS &
                    echo $! >> "$PID_FILE"  # Record process PID
                else
                    # Use stdin/stdout redirection
                    if [ "$NUM_PROCESSES" -ne 1 ]; then
                        ./"${@%.*}" "$i" < "${FIFO_DIRS[$i]}/m_to_u${i}" > "${FIFO_DIRS[$i]}/u${i}_to_m" &
                        echo $! >> "$PID_FILE"  # Record process PID
                    else
                        ./"${@%.*}" < "${FIFO_DIRS[$i]}/m_to_u${i}" > "${FIFO_DIRS[$i]}/u${i}_to_m" &
                        echo $! >> "$PID_FILE"  # Record process PID
                    fi
                fi
            done

            # Wait for all processes to finish
            wait
            
            # Clean up is now handled by the trap
            ;;
            
        *)
            echo "Unsupported task type \"$TASK_TYPE\"" >&2
            exit 1
            ;;
    esac
fi

# piston sometimes randomly truncates large outputs, which results in WA verdicts. this way we can check if the output is truncated and retry if needed
if [ -e "STDOUT_END_MARKER" ]; then
    cat "STDOUT_END_MARKER"
fi